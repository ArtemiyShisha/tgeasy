# Docker Compose для разработки TGeasy
version: '3.8'

services:
  # Сервис для Next.js приложения
  app:
    build:
      context: .
      dockerfile: Dockerfile.dev
    container_name: tgeasy-app
    ports:
      - "3000:3000"
    volumes:
      # Монтируем исходный код для hot-reloading
      - .:/app
      # Анонимные вольюмы для кеша, чтобы избежать перезаписи из хост-машины
      - /app/node_modules
      - /app/.next
    env_file:
      - .env.local
    # Зависит от успешного запуска базы данных и Redis
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    networks:
      - tgeasy-net

  # Сервис базы данных PostgreSQL
  db:
    image: postgres:15-alpine
    container_name: tgeasy-db
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      POSTGRES_DB: tgeasy_db
    ports:
      - "5432:5432"
    volumes:
      # Вольюм для сохранения данных PostgreSQL
      - postgres_data:/var/lib/postgresql/data
      # Монтируем SQL-миграции для автоматической инициализации БД при первом запуске
      # ВАЖНО: Убедитесь, что директория supabase/migrations существует и содержит ваши миграции
      - ./supabase/migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d tgeasy_db"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - tgeasy-net

  # Сервис для кеширования Redis
  redis:
    image: redis:7-alpine
    container_name: tgeasy-redis
    restart: always
    ports:
      - "6379:6379"
    volumes:
      # Вольюм для сохранения данных Redis
      - redis_data:/data
    networks:
      - tgeasy-net

# Именованные вольюмы для персистентности данных
volumes:
  postgres_data:
  redis_data:

# Сеть для взаимодействия между контейнерами
networks:
  tgeasy-net:
    driver: bridge
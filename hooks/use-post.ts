// Hook –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –µ–¥–∏–Ω–∏—á–Ω—ã–º —Ä–µ–∫–ª–∞–º–Ω—ã–º —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
import { useCallback, useState, useEffect } from 'react'
import { Post, PostWithRelations, PostMedia } from '@/types/post'
import { 
  UsePostOptions, 
  UsePostReturn, 
  UpdatePostData,
  MediaUploadOptions,
  PreviewOptions,
  PostPreview,
  PostsApiError
} from '@/types/post-ui'
import { postsApi } from '@/lib/api/posts-api'

// =============================================================================
// –£–¢–ò–õ–ò–¢–´
// =============================================================================

/**
 * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ–± –æ—à–∏–±–∫–µ
 */
function getErrorMessage(error: unknown): string {
  if (error instanceof PostsApiError) {
    return error.message
  }
  if (error instanceof Error) {
    return error.message
  }
  return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'
}

// =============================================================================
// –û–°–ù–û–í–ù–û–ô –•–£–ö
// =============================================================================

export function usePost(options: UsePostOptions): UsePostReturn {
  const {
    postId,
    include = {},
    enabled = true
  } = options

  // –°–æ—Å—Ç–æ—è–Ω–∏–µ
  const [post, setPost] = useState<Post | PostWithRelations | null>(null)
  const [isLoading, setIsLoading] = useState(true)
  const [error, setError] = useState<Error | null>(null)

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö
  useEffect(() => {
    if (post && error) {
      setError(null)
    }
  }, [post, error])

  // =============================================================================
  // –ó–ê–ì–†–£–ó–ö–ê –î–ê–ù–ù–´–•
  // =============================================================================

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Å—Ç–∞
   */
  const fetchPost = useCallback(async () => {
    if (!enabled || !postId) return

    try {
      setError(null)
      setIsLoading(true)

      console.log('üîç Fetching post:', postId, 'with relations:', include.relations)
      const result = await postsApi.getPost(postId, include.relations || false)
      console.log('üì¶ Post API response:', result)
      
      setPost(result)
      
    } catch (err) {
      console.error('Failed to fetch post:', err)
      setError(new Error(getErrorMessage(err)))
    } finally {
      setIsLoading(false)
    }
  }, [enabled, postId, include.relations])

  // –ù–∞—á–∞–ª—å–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞
  useEffect(() => {
    fetchPost()
  }, [fetchPost])

  // =============================================================================
  // –ú–£–¢–ê–¶–ò–ò
  // =============================================================================

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ —Å optimistic update
   */
  const update = useCallback(async (updateData: UpdatePostData): Promise<Post> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      // Optimistic update
      const optimisticPost = { 
        ...post, 
        ...updateData, 
        updated_at: new Date().toISOString() 
      }
      setPost(optimisticPost as Post)

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const updatedPost = await postsApi.updatePost(postId, updateData)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setPost(updatedPost)

      return updatedPost
    } catch (error) {
      // Rollback
      await fetchPost()
      throw error
    }
  }, [post, postId, fetchPost])

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
   */
  const deletePost = useCallback(async (): Promise<void> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      await postsApi.deletePost(postId)
      setPost(null)
    } catch (error) {
      throw error
    }
  }, [post, postId])

  /**
   * –î—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
   */
  const duplicate = useCallback(async (): Promise<Post> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      const duplicatedPost = await postsApi.duplicatePost(postId)
      return duplicatedPost
    } catch (error) {
      throw error
    }
  }, [post, postId])

  // =============================================================================
  // –°–ü–ï–¶–ò–ê–õ–¨–ù–´–ï –û–ü–ï–†–ê–¶–ò–ò
  // =============================================================================

  /**
   * –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
   */
  const schedule = useCallback(async (scheduledAt: Date): Promise<Post> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      // Optimistic update
      const optimisticPost = { 
        ...post, 
        status: 'scheduled' as const,
        scheduled_at: scheduledAt.toISOString(),
        updated_at: new Date().toISOString() 
      }
      setPost(optimisticPost as Post)

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const scheduledPost = await postsApi.schedulePost(postId, scheduledAt)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setPost(scheduledPost)

      return scheduledPost
    } catch (error) {
      // Rollback
      await fetchPost()
      throw error
    }
  }, [post, postId, fetchPost])

  /**
   * –û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞
   */
  const unschedule = useCallback(async (): Promise<Post> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      // Optimistic update
      const optimisticPost = { 
        ...post, 
        status: 'draft' as const,
        scheduled_at: null,
        updated_at: new Date().toISOString() 
      }
      setPost(optimisticPost as Post)

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const unscheduledPost = await postsApi.unschedulePost(postId)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setPost(unscheduledPost)

      return unscheduledPost
    } catch (error) {
      // Rollback
      await fetchPost()
      throw error
    }
  }, [post, postId, fetchPost])

  /**
   * –ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–∞
   */
  const publish = useCallback(async (): Promise<Post> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      // Optimistic update
      const optimisticPost = { 
        ...post, 
        status: 'published' as const,
        published_at: new Date().toISOString(),
        updated_at: new Date().toISOString() 
      }
      setPost(optimisticPost as Post)

      // –í—ã–ø–æ–ª–Ω—è–µ–º —Ä–µ–∞–ª—å–Ω—ã–π –∑–∞–ø—Ä–æ—Å
      const publishedPost = await postsApi.publishPost(postId)

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
      setPost(publishedPost)

      return publishedPost
    } catch (error) {
      // Rollback
      await fetchPost()
      throw error
    }
  }, [post, postId, fetchPost])

  // =============================================================================
  // –ú–ï–î–ò–ê–§–ê–ô–õ–´
  // =============================================================================

  /**
   * –ó–∞–≥—Ä—É–∑–∫–∞ –º–µ–¥–∏–∞—Ñ–∞–π–ª–æ–≤
   */
  const uploadMedia = useCallback(async (
    files: File[], 
    options: MediaUploadOptions = {}
  ): Promise<PostMedia[]> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      const uploadedMedia = await postsApi.uploadMedia(postId, files, options)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç —Å –Ω–æ–≤—ã–º–∏ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞–º–∏ (–µ—Å–ª–∏ —ç—Ç–æ PostWithRelations)
      if ('media' in post && Array.isArray(post.media)) {
        const updatedPost = {
          ...post,
          media: [...(post.media || []), ...uploadedMedia]
        }
        setPost(updatedPost)
      }

      return uploadedMedia
    } catch (error) {
      throw error
    }
  }, [post, postId])

  /**
   * –£–¥–∞–ª–µ–Ω–∏–µ –º–µ–¥–∏–∞—Ñ–∞–π–ª–∞
   */
  const removeMedia = useCallback(async (mediaId: string): Promise<void> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      await postsApi.removeMedia(postId, mediaId)

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ—Å—Ç, —É–±–∏—Ä–∞—è —É–¥–∞–ª–µ–Ω–Ω—ã–π –º–µ–¥–∏–∞—Ñ–∞–π–ª (–µ—Å–ª–∏ —ç—Ç–æ PostWithRelations)
      if ('media' in post && Array.isArray(post.media)) {
        const updatedPost = {
          ...post,
          media: post.media.filter(media => media.id !== mediaId)
        }
        setPost(updatedPost)
      }
    } catch (error) {
      throw error
    }
  }, [post, postId])

  // =============================================================================
  // –ü–†–ï–í–¨–Æ
  // =============================================================================

  /**
   * –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –ø—Ä–µ–≤—å—é –ø–æ—Å—Ç–∞
   */
  const generatePreview = useCallback(async (
    options: PreviewOptions = {}
  ): Promise<PostPreview> => {
    if (!post) {
      throw new Error('Post not loaded')
    }

    try {
      return await postsApi.generatePreview(postId, options)
    } catch (error) {
      throw error
    }
  }, [post, postId])

  // =============================================================================
  // –û–ë–ù–û–í–õ–ï–ù–ò–ï
  // =============================================================================

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
   */
  const refresh = useCallback(async (): Promise<void> => {
    await fetchPost()
  }, [fetchPost])

  // =============================================================================
  // –í–û–ó–í–†–ê–©–ê–ï–ú–û–ï –ó–ù–ê–ß–ï–ù–ò–ï
  // =============================================================================

  const result: UsePostReturn = {
    // –î–∞–Ω–Ω—ã–µ
    post,
    isLoading,
    error,

    // –ú—É—Ç–∞—Ü–∏–∏
    update,
    delete: deletePost,
    duplicate,

    // –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏
    schedule,
    unschedule,
    publish,

    // –ú–µ–¥–∏–∞
    uploadMedia,
    removeMedia,

    // –ü—Ä–µ–≤—å—é
    generatePreview,

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    refresh
  }

  return result
}

// =============================================================================
// –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –•–£–ö–ò
// =============================================================================

/**
 * Hook –¥–ª—è –ø–æ—Å—Ç–∞ —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π —Å–≤—è–∑–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
 */
export function usePostWithRelations(postId: string, enabled = true): UsePostReturn {
  return usePost({
    postId,
    include: {
      relations: true,
      analytics: true,
      media: true
    },
    enabled
  })
}

/**
 * Hook –¥–ª—è –ø–æ—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —Å –æ—Å–Ω–æ–≤–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏
 */
export function usePostBasic(postId: string, enabled = true): UsePostReturn {
  return usePost({
    postId,
    include: {
      relations: false
    },
    enabled
  })
} 
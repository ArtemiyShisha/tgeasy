import { 
  ChannelConnectionRequest, 
  ChannelConnectionResponse,
  ChannelConnectionErrorCode,
  ChannelFilters,
  BotStatus,
  BotStatusCheckResult
} from '@/types/channel'
import { ChannelRepository } from '@/lib/repositories/channel-repository'
import { TelegramBotAPI } from '@/lib/integrations/telegram/bot-api'
import { validateChannelIdentifier, getChannelErrorMessage } from '@/utils/channel-validation'
import { TelegramError } from '@/types/telegram'

// Types for disconnect operation
interface ChannelDisconnectResult {
  success: boolean
  error?: string
  error_code?: ChannelConnectionErrorCode
  status?: number
}

export class ChannelService {
  private static instance: ChannelService
  private channelRepository: ChannelRepository
  private telegramApi: TelegramBotAPI

  private constructor() {
    this.channelRepository = ChannelRepository.getInstance()
    this.telegramApi = new TelegramBotAPI()
  }

  public static getInstance(): ChannelService {
    if (!ChannelService.instance) {
      ChannelService.instance = new ChannelService()
    }
    return ChannelService.instance
  }

  /**
   * –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
   */
  async connectChannel(request: ChannelConnectionRequest): Promise<ChannelConnectionResponse> {
    try {
      // 0. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞ Telegram Bot API
      try {
        await this.telegramApi.getMe()
      } catch (error) {
        console.error('Telegram Bot API authentication failed:', error)
        return {
          success: false,
          error: '–û—à–∏–±–∫–∞ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ Telegram Bot API',
          error_code: ChannelConnectionErrorCode.TELEGRAM_API_ERROR
        }
      }

      // 1. –í–∞–ª–∏–¥–∞—Ü–∏—è –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–∞
      const validation = validateChannelIdentifier(request.identifier)
      if (!validation.is_valid) {
        return {
          success: false,
          error: validation.errors.join(', '),
          error_code: ChannelConnectionErrorCode.INVALID_IDENTIFIER
        }
      }

      const normalizedId = validation.parsed_identifier

      // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –∫–∞–Ω–∞–ª–µ –∏–∑ Telegram
      const chatInfo = await this.telegramApi.getChat(normalizedId)
      if (!chatInfo) {
        return {
          success: false,
          error: getChannelErrorMessage(ChannelConnectionErrorCode.CHANNEL_NOT_FOUND),
          error_code: ChannelConnectionErrorCode.CHANNEL_NOT_FOUND
        }
      }

      // 3. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–∏–ø–∞ —á–∞—Ç–∞ (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∫–∞–Ω–∞–ª)
      if (chatInfo.type !== 'channel') {
        return {
          success: false,
          error: '–£–∫–∞–∑–∞–Ω–Ω—ã–π –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–∞–Ω–∞–ª–æ–º',
          error_code: ChannelConnectionErrorCode.VALIDATION_ERROR
        }
      }

      // 4. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∞ reconnection
      const existingChannel = await this.channelRepository.getByTelegramId(
        chatInfo.id.toString(), 
        request.user_id
      )
      
      if (existingChannel) {
        // –ï—Å–ª–∏ –∫–∞–Ω–∞–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–≤–µ—Ä—è–µ–º - –º–æ–∂–µ—Ç –æ–Ω –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º?
        const userChannelsResult = await this.channelRepository.getUserChannels(request.user_id)
        const isCurrentlyConnected = userChannelsResult.channels.some(ch => ch.id === existingChannel.id)
        
        if (isCurrentlyConnected) {
          // –ö–∞–Ω–∞–ª –∞–∫—Ç–∏–≤–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω
          return {
            success: false,
            error: getChannelErrorMessage(ChannelConnectionErrorCode.ALREADY_CONNECTED),
            error_code: ChannelConnectionErrorCode.ALREADY_CONNECTED
          }
        } else {
          // –ö–∞–Ω–∞–ª –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω - –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º –µ–≥–æ
          console.log('üîÑ Reconnecting previously disconnected channel:', existingChannel.id)
          await this.channelRepository.reconnectUserToChannel(existingChannel.id, request.user_id)
          
                     // –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∫–∞–Ω–∞–ª
           const reconnectedChannel = await this.channelRepository.getById(existingChannel.id)
           
           if (!reconnectedChannel) {
             return {
               success: false,
               error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫–∞–Ω–∞–ª–∞',
               error_code: ChannelConnectionErrorCode.VALIDATION_ERROR
             }
           }
           
           return {
             success: true,
             channel: reconnectedChannel,
             telegram_data: {
               chat: chatInfo
             }
           }
        }
      }

      // 5. –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –≤ –ë–î
      const channelData = {
        telegram_channel_id: chatInfo.id.toString(),
        channel_title: chatInfo.title || '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è',
        channel_username: chatInfo.username || null,
        user_id: request.user_id,
        is_active: true
      }

      const channel = await this.channelRepository.create(channelData)

      return {
        success: true,
        channel: channel,
        telegram_data: {
          chat: chatInfo
        }
      }

    } catch (error) {
      console.error('Channel connection error:', error)
      
      if (error instanceof TelegramError) {
        return {
          success: false,
          error: `–û—à–∏–±–∫–∞ Telegram API: ${error.message}`,
          error_code: ChannelConnectionErrorCode.TELEGRAM_API_ERROR
        }
      }

      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        error_code: ChannelConnectionErrorCode.VALIDATION_ERROR
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  async getUserChannels(userId: string, filters: ChannelFilters = {}) {
    return this.channelRepository.getUserChannels(userId, filters)
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –ø–æ ID
   */
  async getChannelById(channelId: string, userId: string) {
    const channel = await this.channelRepository.getById(channelId)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–∞–Ω–∞–ª –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    if (!channel || channel.user_id !== userId) {
      return null
    }
    
    return channel
  }

  /**
   * –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
   */
  async updateChannel(channelId: string, userId: string, updateData: any) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const channel = await this.channelRepository.getById(channelId)
    if (!channel || channel.user_id !== userId) {
      throw new Error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞')
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
    return this.channelRepository.update(channelId, updateData)
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
   */
  async disconnectChannel(channelId: string, userId: string): Promise<void> {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const channel = await this.channelRepository.getById(channelId)
    if (!channel || channel.user_id !== userId) {
      throw new Error('–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–æ—Å—Ç—É–ø–∞')
    }

    // Soft delete –∫–∞–Ω–∞–ª–∞
    await this.channelRepository.delete(channelId)
  }

  /**
   * –ü–æ–∏—Å–∫ –∫–∞–Ω–∞–ª–æ–≤
   */
  async searchChannels(userId: string, query: string, limit: number = 20) {
    return this.channelRepository.search(query, userId, limit)
  }

  /**
   * –û—Ç–∫–ª—é—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–∞–Ω–∞–ª–∞ (–Ω–µ —É–¥–∞–ª—è–µ—Ç –∫–∞–Ω–∞–ª –∏–∑ –ë–î)
   * 
   * –õ–æ–≥–∏–∫–∞:
   * - –ö–∞–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ë–î (telegram_channels)
   * - –£–¥–∞–ª—è–µ—Ç—Å—è —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞–Ω–∞–ª–æ–º (channel_permissions) 
   * - –ö–∞–Ω–∞–ª –∏—Å—á–µ–∑–∞–µ—Ç –∏–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   * - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –º–æ–∂–µ—Ç –∑–∞–Ω–æ–≤–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å –∫–∞–Ω–∞–ª —á–µ—Ä–µ–∑ –æ–±—ã—á–Ω—ã–π flow
   */
  async disconnectUserFromChannel(channelId: string, userId: string): Promise<ChannelDisconnectResult> {
    try {
      // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞
      const channel = await this.channelRepository.getById(channelId)
      if (!channel) {
        return {
          success: false,
          error: '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
          error_code: ChannelConnectionErrorCode.CHANNEL_NOT_FOUND,
          status: 404
        }
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É
      const userChannelsResult = await this.channelRepository.getUserChannels(userId)
      const hasAccess = userChannelsResult.channels.some(ch => ch.id === channelId)
      
      if (!hasAccess) {
        return {
          success: false,
          error: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É –∏–ª–∏ –æ–Ω —É–∂–µ –æ—Ç–∫–ª—é—á–µ–Ω',
          error_code: ChannelConnectionErrorCode.ACCESS_DENIED,
          status: 403
        }
      }

      // 3. –í —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ —É–¥–∞–ª—è–µ–º —Å–≤—è–∑—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–∞–Ω–∞–ª–æ–º
      // –ï—Å–ª–∏ –≤ –±—É–¥—É—â–µ–º –±—É–¥–µ—Ç —Å–∏—Å—Ç–µ–º–∞ channel_permissions, —Ç–æ —É–¥–∞–ª–∏–º –æ—Ç—Ç—É–¥–∞
      // –ü–æ–∫–∞ —á—Ç–æ –≤ —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º user_id –∫–∞–Ω–∞–ª–∞
      if (channel.user_id !== userId) {
        return {
          success: false,
          error: '–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∏–µ —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞',
          error_code: ChannelConnectionErrorCode.ACCESS_DENIED,
          status: 403
        }
      }

      // 4. –û—Ç–∫–ª—é—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ—Ç –∫–∞–Ω–∞–ª–∞ (–∫–∞–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –¥–ª—è –¥—Ä—É–≥–∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
      // –ö–∞–Ω–∞–ª –æ—Å—Ç–∞–µ—Ç—Å—è –≤ –ë–î, –Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –µ–≥–æ –±–æ–ª—å—à–µ –Ω–µ –≤–∏–¥–∏—Ç
      await this.channelRepository.disconnectUserFromChannel(channelId, userId)

      return {
        success: true
      }

    } catch (error) {
      console.error('Error disconnecting user from channel:', error)
      
      return {
        success: false,
        error: error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞',
        error_code: ChannelConnectionErrorCode.VALIDATION_ERROR,
        status: 500
      }
    }
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
   * 
   * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –¥–æ–±–∞–≤–ª–µ–Ω –ª–∏ –±–æ—Ç –≤ –∫–∞–Ω–∞–ª –∏ –∏–º–µ–µ—Ç –ª–∏ –æ–Ω –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø—Ä–∞–≤–∞
   */
  async checkBotStatus(channelId: string, userId: string): Promise<BotStatusCheckResult> {
    try {
      // 1. –ü–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const channel = await this.channelRepository.getById(channelId)
      if (!channel) {
        return {
          success: false,
          bot_status: 'bot_missing',
          error: '–ö–∞–Ω–∞–ª –Ω–µ –Ω–∞–π–¥–µ–Ω',
          checked_at: new Date().toISOString()
        }
      }

      // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫ –∫–∞–Ω–∞–ª—É
      const userChannelsResult = await this.channelRepository.getUserChannels(userId)
      const hasAccess = userChannelsResult.channels.some(ch => ch.id === channelId)
      
      if (!hasAccess) {
        return {
          success: false,
          bot_status: 'bot_missing',
          error: '–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –∫–∞–Ω–∞–ª—É',
          checked_at: new Date().toISOString()
        }
      }

      // 3. –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
      const botInfo = await this.telegramApi.getMe()
      
      // 4. –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ
      try {
        const botMember = await this.telegramApi.getChatMember(
          channel.telegram_channel_id,
          botInfo.id
        )

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –±–æ—Ç –∏–º–µ–µ—Ç –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        const isAdmin = botMember.status === 'administrator' || botMember.status === 'creator'
        const canPost = botMember.can_post_messages || false

        let botStatus: BotStatus
        if (isAdmin && canPost) {
          botStatus = 'active'
        } else if (isAdmin) {
          // –ë–æ—Ç –∞–¥–º–∏–Ω, –Ω–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ—Å—Ç–∏—Ç—å - –≤—Å–µ —Ä–∞–≤–Ω–æ —Å—á–∏—Ç–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–º
          botStatus = 'active'
        } else {
          // –ë–æ—Ç –µ—Å—Ç—å, –Ω–æ –Ω–µ –∞–¥–º–∏–Ω
          botStatus = 'pending_bot'
        }

        // 5. –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await this.channelRepository.update(channelId, {
          bot_status: botStatus,
          bot_last_checked_at: new Date().toISOString()
        })

        return {
          success: true,
          bot_status: botStatus,
          bot_permissions: botMember,
          checked_at: new Date().toISOString()
        }

      } catch (telegramError) {
        console.log('Bot not found in channel or no access:', telegramError)
        
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å: –µ—Å–ª–∏ –∫–∞–Ω–∞–ª –Ω–æ–≤—ã–π - pending_bot, –µ—Å–ª–∏ —Å—Ç–∞—Ä—ã–π - bot_missing
        const isNewChannel = !channel.bot_last_checked_at
        const botStatus = isNewChannel ? 'pending_bot' : 'bot_missing'

        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ë–î
        await this.channelRepository.update(channelId, {
          bot_status: botStatus,
          bot_last_checked_at: new Date().toISOString()
        })

        return {
          success: true,
          bot_status: botStatus,
          error: isNewChannel 
            ? '–ë–æ—Ç –µ—â—ë –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –∫–∞–Ω–∞–ª' 
            : '–ë–æ—Ç –±—ã–ª —É–¥–∞–ª–µ–Ω –∏–∑ –∫–∞–Ω–∞–ª–∞ –∏–ª–∏ –ø–æ—Ç–µ—Ä—è–ª –ø—Ä–∞–≤–∞',
          checked_at: new Date().toISOString()
        }
      }

    } catch (error) {
      console.error('Error checking bot status:', error)
      
      return {
        success: false,
        bot_status: 'bot_missing',
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ç–∞—Ç—É—Å–∞ –±–æ—Ç–∞',
        checked_at: new Date().toISOString()
      }
    }
  }
} 
#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ Telegram Bot Webhook
 * 
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
 * node scripts/setup-telegram-webhook.js
 * 
 * –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
 * - TELEGRAM_BOT_TOKEN: —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –æ—Ç @BotFather
 * - NEXTAUTH_URL: –±–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, https://tgeasy.vercel.app)
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env.local
const fs = require('fs')
const path = require('path')

function loadEnvFile(filePath) {
  try {
    const envFile = fs.readFileSync(filePath, 'utf8')
    const lines = envFile.split('\n')
    
    for (const line of lines) {
      const trimmedLine = line.trim()
      if (trimmedLine && !trimmedLine.startsWith('#')) {
        const [key, ...valueParts] = trimmedLine.split('=')
        if (key && valueParts.length > 0) {
          const value = valueParts.join('=').replace(/^["']|["']$/g, '')
          process.env[key] = value
        }
      }
    }
  } catch (error) {
    // –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ —á–∏—Ç–∞–µ—Ç—Å—è - –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω–æ
  }
}

// –ó–∞–≥—Ä—É–∂–∞–µ–º .env.local –µ—Å–ª–∏ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
loadEnvFile(path.join(__dirname, '..', '.env.local'))

const https = require('https')
const { URL } = require('url')

// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const BOT_TOKEN = process.env.TELEGRAM_BOT_TOKEN
const BASE_URL = process.argv[2] || process.env.NEXTAUTH_URL || 'https://tgeasy.vercel.app'
const WEBHOOK_URL = `${BASE_URL}/api/telegram/webhook`

if (!BOT_TOKEN) {
  console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è')
  console.log('–ü–æ–ª—É—á–∏—Ç–µ —Ç–æ–∫–µ–Ω —É @BotFather –∏ –¥–æ–±–∞–≤—å—Ç–µ –≤ .env.local:')
  console.log('TELEGRAM_BOT_TOKEN=your_bot_token_here')
  process.exit(1)
}

/**
 * –í—ã–ø–æ–ª–Ω—è–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –∫ Telegram Bot API
 */
function telegramRequest(method, data = {}) {
  return new Promise((resolve, reject) => {
    const url = new URL(`https://api.telegram.org/bot${BOT_TOKEN}/${method}`)
    const postData = JSON.stringify(data)
    
    const options = {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Content-Length': Buffer.byteLength(postData)
      }
    }
    
    const req = https.request(url, options, (res) => {
      let body = ''
      res.on('data', (chunk) => body += chunk)
      res.on('end', () => {
        try {
          const result = JSON.parse(body)
          if (result.ok) {
            resolve(result.result)
          } else {
            reject(new Error(`Telegram API Error: ${result.description}`))
          }
        } catch (error) {
          reject(new Error(`Parse Error: ${error.message}`))
        }
      })
    })
    
    req.on('error', reject)
    req.write(postData)
    req.end()
  })
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
 */
async function getBotInfo() {
  try {
    const botInfo = await telegramRequest('getMe')
    console.log('ü§ñ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ:')
    console.log(`   –ò–º—è: ${botInfo.first_name}`)
    console.log(`   Username: @${botInfo.username}`)
    console.log(`   ID: ${botInfo.id}`)
    return botInfo
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ:', error.message)
    throw error
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π webhook
 */
async function getWebhookInfo() {
  try {
    const webhookInfo = await telegramRequest('getWebhookInfo')
    console.log('üîó –¢–µ–∫—É—â–∏–π webhook:')
    console.log(`   URL: ${webhookInfo.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω'}`)
    console.log(`   Pending updates: ${webhookInfo.pending_update_count}`)
    if (webhookInfo.last_error_date) {
      console.log(`   –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: ${webhookInfo.last_error_message}`)
    }
    return webhookInfo
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è webhook:', error.message)
    throw error
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç webhook
 */
async function setWebhook() {
  try {
    console.log(`üîß –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook: ${WEBHOOK_URL}`)
    
    await telegramRequest('setWebhook', {
      url: WEBHOOK_URL,
      allowed_updates: ['message'], // –¢–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è
      drop_pending_updates: true    // –û—á–∏—â–∞–µ–º –æ—á–µ—Ä–µ–¥—å
    })
    
    console.log('‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook:', error.message)
    throw error
  }
}

/**
 * –£–¥–∞–ª—è–µ—Ç webhook (–¥–ª—è –æ—Ç–ª–∞–¥–∫–∏)
 */
async function deleteWebhook() {
  try {
    console.log('üóëÔ∏è  –£–¥–∞–ª—è–µ–º webhook...')
    await telegramRequest('deleteWebhook', { drop_pending_updates: true })
    console.log('‚úÖ Webhook —É–¥–∞–ª–µ–Ω!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook:', error.message)
    throw error
  }
}

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞
 */
async function setBotCommands() {
  try {
    console.log('üìù –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞...')
    
    await telegramRequest('setMyCommands', {
      commands: [
        {
          command: 'start',
          description: '–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç TGeasy'
        },
        {
          command: 'help',
          description: '–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é'
        }
      ]
    })
    
    console.log('‚úÖ –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!')
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥:', error.message)
    throw error
  }
}

/**
 * –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
 */
async function main() {
  console.log('üöÄ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Telegram Bot –¥–ª—è TGeasy\n')
  
  try {
    // –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    await getBotInfo()
    console.log()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
    await getWebhookInfo()
    console.log()
    
    // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    const args = process.argv.slice(2)
    
    if (args.includes('--delete')) {
      await deleteWebhook()
      return
    }
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await setWebhook()
    console.log()
    
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    await setBotCommands()
    console.log()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    await getWebhookInfo()
    
    console.log('\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!')
    console.log('\nüìã –ß—Ç–æ –¥–∞–ª—å—à–µ:')
    console.log('1. –£–±–µ–¥–∏—Ç–µ—Å—å —á—Ç–æ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è TELEGRAM_BOT_TOKEN –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ Vercel')
    console.log('2. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –±–æ—Ç–∞: –Ω–∞–ø–∏—à–∏—Ç–µ /start –±–æ—Ç—É @' + (await getBotInfo()).username)
    console.log('3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ webhook –≤ Vercel Dashboard')
    
  } catch (error) {
    console.error('\nüí• –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:', error.message)
    process.exit(1)
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
if (require.main === module) {
  main()
}

module.exports = {
  getBotInfo,
  getWebhookInfo,
  setWebhook,
  deleteWebhook,
  setBotCommands
} 
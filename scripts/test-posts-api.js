#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è Posts API
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—ã–µ endpoints API —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
 */

const BASE_URL = process.env.NEXT_PUBLIC_APP_URL || 'http://localhost:3000'

// –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
const testPost = {
  channel_id: 'test-channel-id',
  title: '–¢–µ—Å—Ç–æ–≤–æ–µ —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ API',
  creative_text: '–≠—Ç–æ —Ç–µ—Å—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º–Ω–æ–≥–æ –∫—Ä–µ–∞—Ç–∏–≤–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ API',
  target_url: 'https://example.com',
  advertiser_inn: '1234567890',
  advertiser_name: '–¢–µ—Å—Ç–æ–≤—ã–π —Ä–µ–∫–ª–∞–º–æ–¥–∞—Ç–µ–ª—å',
  product_description: '–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–¥—É–∫—Ç',
  placement_cost: 5000,
  placement_currency: 'RUB'
}

const testAuthHeaders = {
  'Authorization': 'Bearer test-token',
  'Content-Type': 'application/json'
}

async function makeRequest(endpoint, options = {}) {
  const url = `${BASE_URL}/api${endpoint}`
  
  try {
    console.log(`\nüîÑ ${options.method || 'GET'} ${endpoint}`)
    
    const response = await fetch(url, {
      headers: testAuthHeaders,
      ...options
    })
    
    const data = await response.json()
    
    console.log(`   Status: ${response.status}`)
    console.log(`   Response:`, JSON.stringify(data, null, 2))
    
    return { response, data }
  } catch (error) {
    console.error(`   Error:`, error.message)
    return { error }
  }
}

async function testPostsAPI() {
  console.log('üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Posts API')
  console.log('=' .repeat(50))
  
  let createdPostId = null
  
  // 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤
  console.log('\nüìã 1. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ—Å—Ç–æ–≤')
  await makeRequest('/posts')
  
  // 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
  console.log('\nüìä 2. –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏')
  await makeRequest('/posts/stats')
  
  // 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
  console.log('\n‚ûï 3. –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ—Å—Ç–∞')
  const createResult = await makeRequest('/posts', {
    method: 'POST',
    body: JSON.stringify(testPost)
  })
  
  if (createResult.data?.success) {
    createdPostId = createResult.data.data.post.id
    console.log(`   ‚úÖ –ü–æ—Å—Ç —Å–æ–∑–¥–∞–Ω —Å ID: ${createdPostId}`)
  }
  
  if (createdPostId) {
    // 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID
    console.log('\nüîç 4. –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å—Ç–∞ –ø–æ ID')
    await makeRequest(`/posts/${createdPostId}`)
    
    // 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    console.log('\n‚úèÔ∏è 5. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞')
    await makeRequest(`/posts/${createdPostId}`, {
      method: 'PUT',
      body: JSON.stringify({
        title: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –∑–∞–≥–æ–ª–æ–≤–æ–∫',
        creative_text: '–û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–∞'
      })
    })
    
    // 6. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞
    console.log('\n‚è∞ 6. –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞')
    const scheduleDate = new Date()
    scheduleDate.setHours(scheduleDate.getHours() + 1) // –ß–µ—Ä–µ–∑ —á–∞—Å
    
    await makeRequest(`/posts/${createdPostId}/schedule`, {
      method: 'POST',
      body: JSON.stringify({
        scheduled_at: scheduleDate.toISOString()
      })
    })
    
    // 7. –û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
    console.log('\n‚ùå 7. –û—Ç–º–µ–Ω–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è')
    await makeRequest(`/posts/${createdPostId}/schedule`, {
      method: 'DELETE'
    })
    
    // 8. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞
    console.log('\nüóëÔ∏è 8. –£–¥–∞–ª–µ–Ω–∏–µ –ø–æ—Å—Ç–∞')
    await makeRequest(`/posts/${createdPostId}`, {
      method: 'DELETE'
    })
  }
  
  // 9. –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤
  console.log('\nüîé 9. –ü–æ–∏—Å–∫ –ø–æ—Å—Ç–æ–≤')
  await makeRequest('/posts/search?q=—Ç–µ—Å—Ç&limit=5')
  
  // 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏
  console.log('\n‚ùó 10. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏')
  await makeRequest('/posts', {
    method: 'POST',
    body: JSON.stringify({
      title: '', // –ü—É—Å—Ç–æ–π –∑–∞–≥–æ–ª–æ–≤–æ–∫ - –¥–æ–ª–∂–Ω–æ –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É
      creative_text: 'test'
    })
  })
  
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!')
}

async function testRateLimit() {
  console.log('\nüö¶ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Rate Limiting')
  console.log('=' .repeat(50))
  
  // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –º–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ–¥—Ä—è–¥
  console.log('\nüìà –û—Ç–ø—Ä–∞–≤–∫–∞ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤...')
  
  const promises = []
  for (let i = 0; i < 5; i++) {
    promises.push(makeRequest('/posts/stats'))
  }
  
  await Promise.all(promises)
  console.log('\n‚úÖ Rate limiting —Ç–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω')
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
async function runTests() {
  try {
    await testPostsAPI()
    await testRateLimit()
  } catch (error) {
    console.error('\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤:', error)
    process.exit(1)
  }
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
const args = process.argv.slice(2)
if (args.includes('--help') || args.includes('-h')) {
  console.log(`
–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node test-posts-api.js [–æ–ø—Ü–∏–∏]

–û–ø—Ü–∏–∏:
  --help, -h     –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
  --url <url>    –£–∫–∞–∑–∞—Ç—å –±–∞–∑–æ–≤—ã–π URL (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: http://localhost:3000)

–ü—Ä–∏–º–µ—Ä—ã:
  node test-posts-api.js
  node test-posts-api.js --url https://your-app.vercel.app

–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è:
  NEXT_PUBLIC_APP_URL    –ë–∞–∑–æ–≤—ã–π URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
`)
  process.exit(0)
}

if (args.includes('--url')) {
  const urlIndex = args.indexOf('--url')
  if (args[urlIndex + 1]) {
    BASE_URL = args[urlIndex + 1]
  }
}

console.log(`üåê –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ API –Ω–∞: ${BASE_URL}`)
runTests() 
#!/usr/bin/env node

/**
 * –¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ middleware –ª–æ–≥–∏–∫–∏
 * –ó–∞–ø—É—Å–∫: node scripts/test-middleware.js
 */

const crypto = require('crypto');

// Mock –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
const mockTelegramUser = {
  id: 123456789,
  first_name: '–¢–µ—Å—Ç',
  last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  username: 'testuser',
  telegram_id: 123456789,
  role: 'user',
  created_at: new Date().toISOString()
};

const mockAdminUser = {
  id: 987654321,
  first_name: '–ê–¥–º–∏–Ω',
  last_name: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å',
  username: 'adminuser',
  telegram_id: 987654321,
  role: 'admin',
  created_at: new Date().toISOString()
};

/**
 * –°–æ–∑–¥–∞–µ–º mock JWT —Ç–æ–∫–µ–Ω –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function createMockJWT(user) {
  const header = {
    alg: 'HS256',
    typ: 'JWT'
  };

  const payload = {
    sub: user.id.toString(),
    user_metadata: {
      telegram_id: user.telegram_id,
      telegram_first_name: user.first_name,
      telegram_last_name: user.last_name,
      telegram_username: user.username
    },
    role: user.role,
    iat: Math.floor(Date.now() / 1000),
    exp: Math.floor(Date.now() / 1000) + 3600 // 1 —á–∞—Å
  };

  const headerBase64 = Buffer.from(JSON.stringify(header)).toString('base64url');
  const payloadBase64 = Buffer.from(JSON.stringify(payload)).toString('base64url');
  
  // –ü—Ä–æ—Å—Ç–∞—è –ø–æ–¥–ø–∏—Å—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–≤ —Ä–µ–∞–ª—å–Ω–æ—Å—Ç–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è Supabase)
  const signature = crypto
    .createHmac('sha256', 'test-secret')
    .update(`${headerBase64}.${payloadBase64}`)
    .digest('base64url');

  return `${headerBase64}.${payloadBase64}.${signature}`;
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ JWT —Ç–æ–∫–µ–Ω–∞
 */
function testExtractUserFromToken() {
  console.log('\nüîç –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Ç–æ–∫–µ–Ω–∞...\n');
  
  const userToken = createMockJWT(mockTelegramUser);
  const adminToken = createMockJWT(mockAdminUser);
  
  console.log('üìù Mock User JWT Token:');
  console.log(userToken.substring(0, 50) + '...');
  
  console.log('\nüìù Mock Admin JWT Token:');
  console.log(adminToken.substring(0, 50) + '...');
  
  // –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
  try {
    const userPayload = JSON.parse(
      Buffer.from(userToken.split('.')[1], 'base64url').toString()
    );
    
    console.log('\n‚úÖ User Token Payload:');
    console.log({
      sub: userPayload.sub,
      role: userPayload.role,
      telegram_id: userPayload.user_metadata?.telegram_id,
      first_name: userPayload.user_metadata?.telegram_first_name
    });
    
    const adminPayload = JSON.parse(
      Buffer.from(adminToken.split('.')[1], 'base64url').toString()
    );
    
    console.log('\n‚úÖ Admin Token Payload:');
    console.log({
      sub: adminPayload.sub,
      role: adminPayload.role,
      telegram_id: adminPayload.user_metadata?.telegram_id,
      first_name: adminPayload.user_metadata?.telegram_first_name
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–æ–∫–µ–Ω–∞:', error.message);
  }
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤
 */
function testRouteMatching() {
  console.log('\nüõ£Ô∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤...\n');
  
  const publicRoutes = [
    '/',
    '/login',
    '/api/auth/telegram',
    '/api/auth/callback',
    '/public-stats/abc123'
  ];
  
  const protectedRoutes = [
    '/dashboard',
    '/dashboard/channels',
    '/dashboard/posts/new',
    '/api/protected/test'
  ];
  
  const adminRoutes = [
    '/admin',
    '/admin/users',
    '/api/admin/test'
  ];
  
  // –§—É–Ω–∫—Ü–∏–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –º–∞—Ä—à—Ä—É—Ç–æ–≤ (–∫–æ–ø–∏—è –∏–∑ middleware)
  function isPublicRoute(pathname) {
    const publicPaths = ['/', '/login', '/api/auth', '/public-stats', '/favicon.ico', '/_next', '/static'];
    return publicPaths.some(route => 
      pathname === route || pathname.startsWith(route + '/')
    );
  }
  
  function isProtectedRoute(pathname) {
    const protectedPaths = ['/dashboard', '/api/protected'];
    return protectedPaths.some(route => 
      pathname === route || pathname.startsWith(route + '/')
    );
  }
  
  function isAdminRoute(pathname) {
    const adminPaths = ['/admin', '/api/admin'];
    return adminPaths.some(route => 
      pathname === route || pathname.startsWith(route + '/')
    );
  }
  
  console.log('‚úÖ –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
  publicRoutes.forEach(route => {
    const isPublic = isPublicRoute(route);
    console.log(`  ${isPublic ? '‚úÖ' : '‚ùå'} ${route} -> public: ${isPublic}`);
  });
  
  console.log('\nüîê –ó–∞—â–∏—â–µ–Ω–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
  protectedRoutes.forEach(route => {
    const isProtected = isProtectedRoute(route);
    console.log(`  ${isProtected ? '‚úÖ' : '‚ùå'} ${route} -> protected: ${isProtected}`);
  });
  
  console.log('\nüëë –ê–¥–º–∏–Ω—Å–∫–∏–µ –º–∞—Ä—à—Ä—É—Ç—ã:');
  adminRoutes.forEach(route => {
    const isAdmin = isAdminRoute(route);
    console.log(`  ${isAdmin ? '‚úÖ' : '‚ùå'} ${route} -> admin: ${isAdmin}`);
  });
}

/**
 * –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ª–æ–≥–∏–∫—É middleware
 */
function testMiddlewareLogic() {
  console.log('\n‚öôÔ∏è  –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏ middleware...\n');
  
  const userToken = createMockJWT(mockTelegramUser);
  const adminToken = createMockJWT(mockAdminUser);
  
  // –°–∏–º—É–ª—è—Ü–∏—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
  const testCases = [
    { path: '/', token: null, expected: 'public' },
    { path: '/login', token: null, expected: 'public' },
    { path: '/dashboard', token: null, expected: 'redirect-login' },
    { path: '/dashboard', token: userToken, expected: 'allow' },
    { path: '/dashboard/channels', token: userToken, expected: 'allow' },
    { path: '/admin', token: null, expected: 'redirect-login' },
    { path: '/admin', token: userToken, expected: 'forbidden' },
    { path: '/admin', token: adminToken, expected: 'allow' },
    { path: '/api/protected/test', token: userToken, expected: 'allow' },
    { path: '/api/admin/test', token: userToken, expected: 'forbidden' },
    { path: '/api/admin/test', token: adminToken, expected: 'allow' }
  ];
  
  testCases.forEach(({ path, token, expected }) => {
    let result;
    
    // –ü—É–±–ª–∏—á–Ω—ã–µ –º–∞—Ä—à—Ä—É—Ç—ã
    if (path === '/' || path === '/login' || path.startsWith('/public-stats')) {
      result = 'public';
    }
    // –ù–µ—Ç —Ç–æ–∫–µ–Ω–∞
    else if (!token) {
      result = 'redirect-login';
    }
    // –ï—Å—Ç—å —Ç–æ–∫–µ–Ω
    else {
      try {
        const payload = JSON.parse(
          Buffer.from(token.split('.')[1], 'base64url').toString()
        );
        
        const isAdmin = payload.role === 'admin';
        
        if (path.startsWith('/admin') || path.startsWith('/api/admin')) {
          result = isAdmin ? 'allow' : 'forbidden';
        } else {
          result = 'allow';
        }
      } catch (error) {
        result = 'invalid-token';
      }
    }
    
    const status = result === expected ? '‚úÖ' : '‚ùå';
    console.log(`  ${status} ${path} (token: ${token ? 'yes' : 'no'}) -> ${result} (expected: ${expected})`);
  });
}

/**
 * –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
 */
function runTests() {
  console.log('üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ middleware –¥–ª—è TGeasy\n');
  console.log('=' .repeat(60));
  
  testExtractUserFromToken();
  testRouteMatching();
  testMiddlewareLogic();
  
  console.log('\n' + '='.repeat(60));
  console.log('\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('\nüí° –î–ª—è –ø–æ–ª–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:');
  console.log('   1. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è');
  console.log('   2. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: npm run dev');
  console.log('   3. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—é —á–µ—Ä–µ–∑ Telegram');
  console.log('   4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –¥–æ—Å—Ç—É–ø –∫ –∑–∞—â–∏—â–µ–Ω–Ω—ã–º –º–∞—Ä—à—Ä—É—Ç–∞–º');
}

// –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤
runTests(); 
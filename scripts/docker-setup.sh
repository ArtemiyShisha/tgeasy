#!/bin/bash

set -e

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    print_info "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        print_error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        print_error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω"
        exit 1
    fi
    
    print_success "–í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞
setup_env() {
    if [ ! -f ".env.local" ]; then
        print_info "–°–æ–∑–¥–∞–Ω–∏–µ .env.local —Ñ–∞–π–ª–∞..."
        cp .env.docker .env.local
        print_success ".env.local —Å–æ–∑–¥–∞–Ω"
        print_warning "–û–±–Ω–æ–≤–∏—Ç–µ API –∫–ª—é—á–∏ –≤ .env.local"
    else
        print_info ".env.local —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"
    fi
}

# –°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π
create_directories() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π..."
    
    directories=(
        "logs"
        "data/postgres"
        "data/redis"
        "scripts"
        "backups"
    )
    
    for dir in "${directories[@]}"; do
        mkdir -p "$dir"
    done
    
    print_success "–î–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ —Å–æ–∑–¥–∞–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ init script –¥–ª—è –ë–î
create_db_init() {
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ init-db.sql..."
    
    cat > scripts/init-db.sql << 'EOF'
-- –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
INSERT INTO users (id, telegram_id, telegram_username, telegram_first_name, email, company_name)
VALUES (
  '00000000-0000-0000-0000-000000000001',
  123456789,
  'developer',
  'Developer',
  'dev@tgeasy.com',
  'TGeasy Development'
) ON CONFLICT (telegram_id) DO NOTHING;

-- –ê–∫—Ç–∏–≤–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
INSERT INTO user_subscriptions (
  user_id, 
  plan, 
  max_channels, 
  max_posts_per_month, 
  price_kopecks, 
  expires_at
) VALUES (
  '00000000-0000-0000-0000-000000000001',
  'professional',
  15,
  200,
  699000,
  NOW() + INTERVAL '1 year'
) ON CONFLICT DO NOTHING;

SELECT 'TGeasy Development Database initialized!' as message;
EOF
    
    print_success "init-db.sql —Å–æ–∑–¥–∞–Ω"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    print_info "–ó–∞–ø—É—Å–∫ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    docker-compose down 2>/dev/null || true
    docker-compose up --build -d
    
    print_info "–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    sleep 15
    
    if docker-compose ps | grep -q "Up"; then
        print_success "–°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã!"
        
        echo ""
        print_info "üåê –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:"
        echo "  ‚Ä¢ Next.js App:    http://localhost:3000"
        echo "  ‚Ä¢ Database UI:    http://localhost:8080"
        echo "  ‚Ä¢ PostgreSQL:     localhost:5432"
        echo "  ‚Ä¢ Redis:          localhost:6379"
        
        echo ""
        print_info "üìä –£—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–î:"
        echo "  ‚Ä¢ Database: tgeasy"
        echo "  ‚Ä¢ Username: postgres"
        echo "  ‚Ä¢ Password: postgres"
        
    else
        print_error "–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"
        docker-compose logs
        exit 1
    fi
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
stop_services() {
    print_info "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose down
    print_success "–°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –û—á–∏—Å—Ç–∫–∞
cleanup() {
    print_warning "–û—á–∏—Å—Ç–∫–∞ Docker —Ä–µ—Å—É—Ä—Å–æ–≤..."
    docker-compose down -v --remove-orphans
    docker system prune -f
    print_success "–û—á–∏—Å—Ç–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –õ–æ–≥–∏
show_logs() {
    service=${1:-""}
    if [ -n "$service" ]; then
        docker-compose logs -f "$service"
    else
        docker-compose logs -f
    fi
}

# Backup –ë–î
backup_db() {
    timestamp=$(date +%Y%m%d_%H%M%S)
    backup_file="backups/tgeasy_backup_${timestamp}.sql"
    
    print_info "–°–æ–∑–¥–∞–Ω–∏–µ backup..."
    mkdir -p backups
    
    docker-compose exec -T db pg_dump -U postgres tgeasy > "$backup_file"
    
    if [ $? -eq 0 ]; then
        print_success "Backup —Å–æ–∑–¥–∞–Ω: $backup_file"
    else
        print_error "–û—à–∏–±–∫–∞ backup"
        exit 1
    fi
}

# Restore –ë–î
restore_db() {
    backup_file=$1
    
    if [ -z "$backup_file" ] || [ ! -f "$backup_file" ]; then
        print_error "–£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–∞–π–ª backup"
        exit 1
    fi
    
    print_warning "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ë–î –∏–∑: $backup_file"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): " -n 1 -r
    echo
    
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        docker-compose exec -T db psql -U postgres -c "DROP DATABASE IF EXISTS tgeasy;"
        docker-compose exec -T db psql -U postgres -c "CREATE DATABASE tgeasy;"
        docker-compose exec -T db psql -U postgres tgeasy < "$backup_file"
        print_success "–ë–î –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞"
    fi
}

# –ü–æ–º–æ—â—å
show_help() {
    echo "TGeasy Docker Setup Script"
    echo ""
    echo "–ö–æ–º–∞–Ω–¥—ã:"
    echo "  start     - –ó–∞–ø—É—Å—Ç–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  stop      - –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
    echo "  restart   - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    echo "  cleanup   - –û—á–∏—Å—Ç–∏—Ç—å –≤—Å–µ —Ä–µ—Å—É—Ä—Å—ã"
    echo "  logs      - –ü–æ–∫–∞–∑–∞—Ç—å –ª–æ–≥–∏"
    echo "  backup    - –°–æ–∑–¥–∞—Ç—å backup –ë–î"
    echo "  restore   - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ë–î"
    echo "  status    - –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤"
    echo "  help      - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É"
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    command=${1:-"start"}
    
    case $command in
        "start")
            check_dependencies
            setup_env
            create_directories
            create_db_init
            start_services
            ;;
        "stop")
            stop_services
            ;;
        "restart")
            stop_services
            sleep 2
            start_services
            ;;
        "cleanup")
            cleanup
            ;;
        "logs")
            show_logs $2
            ;;
        "backup")
            backup_db
            ;;
        "restore")
            restore_db $2
            ;;
        "status")
            docker-compose ps
            ;;
        "help"|"-h"|"--help")
            show_help
            ;;
        *)
            print_error "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: $command"
            show_help
            exit 1
            ;;
    esac
}

main "$@"
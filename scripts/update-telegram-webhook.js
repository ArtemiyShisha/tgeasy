#!/usr/bin/env node

/**
 * –°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è Telegram webhook URL –Ω–∞ preview deployment
 * –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/update-telegram-webhook.js <VERCEL_URL>
 */

// –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env.local
require('dotenv').config({ path: '.env.local' });

const https = require('https');

async function updateTelegramWebhook(vercelUrl) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  
  if (!botToken) {
    console.error('‚ùå TELEGRAM_BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è');
    process.exit(1);
  }

  const webhookUrl = `https://${vercelUrl}/api/webhooks/telegram`;
  const telegramApiUrl = `https://api.telegram.org/bot${botToken}/setWebhook`;
  
  const data = JSON.stringify({
    url: webhookUrl,
    allowed_updates: ['message', 'channel_post', 'chat_member']
  });

  const options = {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
      'Content-Length': data.length
    }
  };

  return new Promise((resolve, reject) => {
    const req = https.request(telegramApiUrl, options, (res) => {
      let responseData = '';
      
      res.on('data', (chunk) => {
        responseData += chunk;
      });
      
      res.on('end', () => {
        const response = JSON.parse(responseData);
        if (response.ok) {
          console.log('‚úÖ Telegram webhook –æ–±–Ω–æ–≤–ª–µ–Ω —É—Å–ø–µ—à–Ω–æ!');
          console.log(`üîó Webhook URL: ${webhookUrl}`);
          resolve(response);
        } else {
          console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è webhook:', response.description);
          reject(new Error(response.description));
        }
      });
    });

    req.on('error', (error) => {
      console.error('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error.message);
      reject(error);
    });

    req.write(data);
    req.end();
  });
}

async function checkCurrentWebhook() {
  const botToken = process.env.TELEGRAM_BOT_TOKEN;
  const telegramApiUrl = `https://api.telegram.org/bot${botToken}/getWebhookInfo`;
  
  return new Promise((resolve, reject) => {
    https.get(telegramApiUrl, (res) => {
      let data = '';
      
      res.on('data', (chunk) => {
        data += chunk;
      });
      
      res.on('end', () => {
        const response = JSON.parse(data);
        if (response.ok) {
          console.log('üì° –¢–µ–∫—É—â–∏–π webhook:', response.result.url || '–Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω');
          resolve(response.result);
        } else {
          reject(new Error(response.description));
        }
      });
    }).on('error', reject);
  });
}

async function main() {
  const vercelUrl = process.argv[2];
  
  if (!vercelUrl) {
    console.error('‚ùå –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: node scripts/update-telegram-webhook.js <VERCEL_URL>');
    console.error('   –ü—Ä–∏–º–µ—Ä: node scripts/update-telegram-webhook.js tgeasy-git-dev-username.vercel.app');
    process.exit(1);
  }

  try {
    console.log('üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook...');
    await checkCurrentWebhook();
    
    console.log('üîÑ –û–±–Ω–æ–≤–ª—è–µ–º webhook...');
    await updateTelegramWebhook(vercelUrl);
    
    console.log('\nüéâ –ì–æ—Ç–æ–≤–æ! –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å Telegram OAuth:');
    console.log(`   OAuth URL: https://${vercelUrl}/api/auth/telegram`);
    console.log(`   Callback URL: https://${vercelUrl}/api/auth/callback`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error.message);
    process.exit(1);
  }
}

if (require.main === module) {
  main();
}

module.exports = { updateTelegramWebhook, checkCurrentWebhook }; 
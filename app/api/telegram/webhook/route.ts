import { NextRequest, NextResponse } from 'next/server'
import { createClient } from '@/lib/supabase/server'

export const dynamic = 'force-dynamic'

/**
 * –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
 */
async function sendMessage(chatId: number, text: string, replyMarkup?: any) {
  const botToken = process.env.TELEGRAM_BOT_TOKEN
  if (!botToken) {
    console.error('TELEGRAM_BOT_TOKEN not configured')
    return false
  }

  try {
    const response = await fetch(`https://api.telegram.org/bot${botToken}/sendMessage`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        chat_id: chatId,
        text,
        reply_markup: replyMarkup,
        parse_mode: 'HTML'
      })
    })

    const result = await response.json()
    
    if (!result.ok) {
      console.error('Telegram API error:', result)
      return false
    }

    return true
  } catch (error) {
    console.error('Error sending message:', error)
    return false
  }
}

/**
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
 */
async function handleStartCommand(telegramUserId: number, firstName: string, startParam?: string) {
  const supabase = createClient()
  
  console.log(`üîç Start command from user ${telegramUserId}, param: ${startParam}`)
  
  // –ï—Å–ª–∏ —ç—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
  if (startParam && startParam.startsWith('auth_')) {
    const state = startParam.replace('auth_', '')
    
    // –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const { data: user, error } = await supabase
      .from('users')
      .upsert({
        telegram_id: telegramUserId,
        telegram_first_name: firstName,
        last_login_at: new Date().toISOString()
      }, {
        onConflict: 'telegram_id'
      })
      .select()
      .single()

    if (error) {
      console.error('Error creating/updating user:', error)
      return false
    }

    console.log(`‚úÖ User created/updated: ${user.id}`)

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
    const completeUrl = `${process.env.NEXT_PUBLIC_APP_URL || 'https://tgeasy.vercel.app'}/auth/complete?telegram_id=${telegramUserId}&state=${state}`
    
    const keyboard = {
      inline_keyboard: [[
        {
          text: 'üöÄ –ó–∞–≤–µ—Ä—à–∏—Ç—å –≤—Ö–æ–¥',
          url: completeUrl
        }
      ]]
    }

    const message = `üéâ <b>–û—Ç–ª–∏—á–Ω–æ!</b>

–í–∞—à –∞–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤ TGeasy!

üë§ <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:</b> ${firstName}
üÜî <b>ID:</b> ${telegramUserId}

–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ —á—Ç–æ–±—ã –∑–∞–≤–µ—Ä—à–∏—Ç—å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é –∏ –ø–µ—Ä–µ–π—Ç–∏ –≤ –¥–∞—à–±–æ—Ä–¥:`

    return await sendMessage(telegramUserId, message, keyboard)
  }

  // –û–±—ã—á–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ /start –±–µ–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
  const welcomeMessage = `üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TGeasy!</b>

üöÄ <b>TGeasy</b> - —ç—Ç–æ –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π –≤ Telegram –∫–∞–Ω–∞–ª–∞—Ö.

<b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>
üì∫ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–º–∏ –∫–∞–Ω–∞–ª–∞–º–∏
üìù –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–∫–ª–∞–º–Ω—ã—Ö —Ä–∞–∑–º–µ—â–µ–Ω–∏–π
üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ –æ—Ç—á–µ—Ç—ã
üí∞ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∞—Ä–∫–∏—Ä–æ–≤–∫–∞ –û–†–î

–î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ —Å–∞–π—Ç –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Telegram.`

  return await sendMessage(telegramUserId, welcomeMessage)
}

/**
 * POST /api/telegram/webhook
 * –û–±—Ä–∞–±–æ—Ç–∫–∞ webhook –æ—Ç Telegram Bot API
 */
export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    console.log('üì® Telegram webhook received:', JSON.stringify(body, null, 2))

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if (body.message) {
      const message = body.message
      const chatId = message.chat.id
      const userId = message.from.id
      const firstName = message.from.first_name || '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å'
      const text = message.text

      console.log(`üí¨ Message from ${firstName} (${userId}): ${text}`)

      // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
      if (text && text.startsWith('/start')) {
        const parts = text.split(' ')
        const startParam = parts.length > 1 ? parts[1] : undefined
        
        const success = await handleStartCommand(userId, firstName, startParam)
        
        if (success) {
          console.log(`‚úÖ Start command handled successfully for user ${userId}`)
        } else {
          console.error(`‚ùå Failed to handle start command for user ${userId}`)
        }
      }
    }

    return NextResponse.json({ ok: true })
  } catch (error) {
    console.error('‚ùå Webhook error:', error)
    return NextResponse.json({ error: 'Internal server error' }, { status: 500 })
  }
}

/**
 * GET /api/telegram/webhook
 * Health check endpoint
 */
export async function GET() {
  return NextResponse.json({ 
    status: 'ok', 
    timestamp: new Date().toISOString() 
  })
} 
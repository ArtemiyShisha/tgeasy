/**
 * –£—Ç–∏–ª–∏—Ç—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø—Ä–∞–≤–∞–º–∏ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª–∞–º –≤ UI –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞—Ö
 */

import type {
  ChannelPermission,
  TelegramUserStatus,
  PermissionType,
  UserChannelAccess,
  ChannelPermissionsSummary
} from '@/types/channel-permissions';

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –∏–º–µ–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ
 */
export function hasPermission(
  permission: ChannelPermission | null,
  type: PermissionType
): boolean {
  if (!permission) return false;
  
  // Creator –∏–º–µ–µ—Ç –≤—Å–µ –ø—Ä–∞–≤–∞
  if (permission.telegram_status === 'creator') {
    return true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–µ –ø—Ä–∞–≤–æ
  return permission[type] === true;
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞—Ç–µ–ª–µ–º –∫–∞–Ω–∞–ª–∞
 */
export function isChannelCreator(permission: ChannelPermission | null): boolean {
  return permission?.telegram_status === 'creator';
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∫–∞–Ω–∞–ª–∞
 */
export function isChannelAdmin(permission: ChannelPermission | null): boolean {
  return permission?.telegram_status === 'administrator';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —É—Ä–æ–≤–µ–Ω—å –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getAccessLevel(permission: ChannelPermission | null): 'creator' | 'administrator' | 'none' {
  if (!permission) return 'none';
  
  if (permission.telegram_status === 'creator') return 'creator';
  if (permission.telegram_status === 'administrator') return 'administrator';
  
  return 'none';
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getAvailableActions(permission: ChannelPermission | null): PermissionType[] {
  if (!permission) return [];
  
  const actions: PermissionType[] = [];
  
  if (hasPermission(permission, 'can_post_messages')) {
    actions.push('can_post_messages');
  }
  
  if (hasPermission(permission, 'can_edit_messages')) {
    actions.push('can_edit_messages');
  }
  
  if (hasPermission(permission, 'can_delete_messages')) {
    actions.push('can_delete_messages');
  }
  
  if (hasPermission(permission, 'can_change_info')) {
    actions.push('can_change_info');
  }
  
  if (hasPermission(permission, 'can_invite_users')) {
    actions.push('can_invite_users');
  }
  
  return actions;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatUserStatus(status: TelegramUserStatus): string {
  switch (status) {
    case 'creator':
      return '–°–æ–∑–¥–∞—Ç–µ–ª—å';
    case 'administrator':
      return '–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä';
    default:
      return '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ';
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Ü–≤–µ—Ç –¥–ª—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getStatusColor(status: TelegramUserStatus): string {
  switch (status) {
    case 'creator':
      return 'text-purple-600 bg-purple-100';
    case 'administrator':
      return 'text-blue-600 bg-blue-100';
    default:
      return 'text-gray-600 bg-gray-100';
  }
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–∞–≤–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
 */
export function formatPermissionName(permission: PermissionType): string {
  switch (permission) {
    case 'can_post_messages':
      return '–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π';
    case 'can_edit_messages':
      return '–†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π';
    case 'can_delete_messages':
      return '–£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π';
    case 'can_change_info':
      return '–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏';
    case 'can_invite_users':
      return '–ü—Ä–∏–≥–ª–∞—à–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π';
    default:
      return permission;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç –∏–∫–æ–Ω–∫—É –¥–ª—è –ø—Ä–∞–≤–∞
 */
export function getPermissionIcon(permission: PermissionType): string {
  switch (permission) {
    case 'can_post_messages':
      return 'üìù';
    case 'can_edit_messages':
      return '‚úèÔ∏è';
    case 'can_delete_messages':
      return 'üóëÔ∏è';
    case 'can_change_info':
      return '‚öôÔ∏è';
    case 'can_invite_users':
      return 'üë•';
    default:
      return '‚ùì';
  }
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–∞ –ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –ø—Ä–∞–≤
 */
export function needsPermissionSync(permission: ChannelPermission): boolean {
  // –ï—Å–ª–∏ –µ—Å—Ç—å –æ—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
  if (permission.sync_error) {
    return true;
  }
  
  // –ï—Å–ª–∏ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è –±—ã–ª–∞ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤ –Ω–∞–∑–∞–¥
  const now = new Date();
  const diffHours = (now.getTime() - permission.last_synced_at.getTime()) / (1000 * 60 * 60);
  
  return diffHours >= 24;
}

/**
 * –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export function formatLastSync(date: Date): string {
  const now = new Date();
  const diffMs = now.getTime() - date.getTime();
  const diffMinutes = Math.floor(diffMs / (1000 * 60));
  const diffHours = Math.floor(diffMs / (1000 * 60 * 60));
  const diffDays = Math.floor(diffMs / (1000 * 60 * 60 * 24));
  
  if (diffMinutes < 1) {
    return '—Ç–æ–ª—å–∫–æ —á—Ç–æ';
  } else if (diffMinutes < 60) {
    return `${diffMinutes} –º–∏–Ω. –Ω–∞–∑–∞–¥`;
  } else if (diffHours < 24) {
    return `${diffHours} —á. –Ω–∞–∑–∞–¥`;
  } else {
    return `${diffDays} –¥–Ω. –Ω–∞–∑–∞–¥`;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å—Ç–∞—Ç—É—Å —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏
 */
export function getSyncStatus(permission: ChannelPermission): {
  status: 'success' | 'warning' | 'error';
  message: string;
  color: string;
} {
  if (permission.sync_error) {
    return {
      status: 'error',
      message: '–û—à–∏–±–∫–∞ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏–∏',
      color: 'text-red-600 bg-red-100'
    };
  }
  
  if (needsPermissionSync(permission)) {
    return {
      status: 'warning',
      message: '–¢—Ä–µ–±—É–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è',
      color: 'text-yellow-600 bg-yellow-100'
    };
  }
  
  return {
    status: 'success',
    message: '–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä–æ–≤–∞–Ω–æ',
    color: 'text-green-600 bg-green-100'
  };
}

/**
 * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ —É—Ä–æ–≤–Ω—é –¥–æ—Å—Ç—É–ø–∞
 */
export function filterChannelsByAccess(
  channels: UserChannelAccess[],
  accessLevel?: 'creator' | 'administrator'
): UserChannelAccess[] {
  if (!accessLevel) return channels;
  
  return channels.filter(channel => channel.access_level === accessLevel);
}

/**
 * –°–æ—Ä—Ç–∏—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –ø–æ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—É (creator > administrator)
 */
export function sortChannelsByAccess(channels: UserChannelAccess[]): UserChannelAccess[] {
  return [...channels].sort((a, b) => {
    // Creator –∫–∞–Ω–∞–ª—ã –∏–¥—É—Ç –ø–µ—Ä–≤—ã–º–∏
    if (a.access_level === 'creator' && b.access_level !== 'creator') return -1;
    if (b.access_level === 'creator' && a.access_level !== 'creator') return 1;
    
    // –ó–∞—Ç–µ–º —Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ channel_id (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ –µ—Å–ª–∏ –æ–Ω–æ –±—É–¥–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ)
    return a.channel_id.localeCompare(b.channel_id);
  });
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–≤–æ–¥–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–∞–≤–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getUserPermissionsSummary(permissions: ChannelPermission[]): {
  totalChannels: number;
  creatorChannels: number;
  adminChannels: number;
  syncErrors: number;
  needsSync: number;
} {
  return {
    totalChannels: permissions.length,
    creatorChannels: permissions.filter(p => p.telegram_status === 'creator').length,
    adminChannels: permissions.filter(p => p.telegram_status === 'administrator').length,
    syncErrors: permissions.filter(p => p.sync_error).length,
    needsSync: permissions.filter(p => needsPermissionSync(p)).length,
  };
}

/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –º–æ–∂–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –¥–µ–π—Å—Ç–≤–∏–µ —Å —Ä–∞–∑–º–µ—â–µ–Ω–∏–µ–º
 */
export function canPerformPostAction(
  permission: ChannelPermission | null,
  action: 'create' | 'edit' | 'delete' | 'publish'
): boolean {
  if (!permission) return false;
  
  switch (action) {
    case 'create':
    case 'publish':
      return hasPermission(permission, 'can_post_messages');
    case 'edit':
      return hasPermission(permission, 'can_edit_messages');
    case 'delete':
      return hasPermission(permission, 'can_delete_messages');
    default:
      return false;
  }
}

/**
 * –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
 */
export function getUserRestrictions(permission: ChannelPermission | null): string[] {
  if (!permission) {
    return ['–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É'];
  }
  
  const restrictions: string[] = [];
  
  if (!hasPermission(permission, 'can_post_messages')) {
    restrictions.push('–ù–µ–ª—å–∑—è —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è');
  }
  
  if (!hasPermission(permission, 'can_edit_messages')) {
    restrictions.push('–ù–µ–ª—å–∑—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è');
  }
  
  if (!hasPermission(permission, 'can_delete_messages')) {
    restrictions.push('–ù–µ–ª—å–∑—è —É–¥–∞–ª—è—Ç—å —Ä–∞–∑–º–µ—â–µ–Ω–∏—è');
  }
  
  if (!hasPermission(permission, 'can_change_info')) {
    restrictions.push('–ù–µ–ª—å–∑—è –∏–∑–º–µ–Ω—è—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–∞–Ω–∞–ª–∞');
  }
  
  if (!hasPermission(permission, 'can_invite_users')) {
    restrictions.push('–ù–µ–ª—å–∑—è –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
  }
  
  return restrictions;
} 